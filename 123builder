#!/bin/bash

# Specify the projects main path. Edit this line before run the script
# Requires the slash at the end of the path
PROJECTS_FOLDER="${HOME}/Projetos/"

# ======================================================================================================================
# Constants and variables declaration
# ======================================================================================================================

# Specify de packages names (also the folder path)
CHEMICAL_X="Chemical-X-SDKJS"
ALKHEMA_SDK="Alkhema-SDK"
ALKHEMA_TAM="Alkhema-TAM"
ALKHEMA_GOL="Alkhema-GOL"
ABSOLEM_TAM="Absolem-TAM"
JOCASTA_TAM="jocasta-tam"

# Specify de packages dependencies (must be declared in build order and include the self package)
declare -A DEPENDENCIES=(
    [$ALKHEMA_TAM]="$CHEMICAL_X $ALKHEMA_SDK $ALKHEMA_TAM"
    [$ALKHEMA_GOL]="$CHEMICAL_X $ALKHEMA_SDK $ALKHEMA_GOL"
    [$ABSOLEM_TAM]="$CHEMICAL_X $ALKHEMA_SDK $ALKHEMA_TAM $ABSOLEM_TAM"
    [$JOCASTA_TAM]="$CHEMICAL_X $ALKHEMA_SDK $ALKHEMA_TAM $JOCASTA_TAM"
)

# Specify the options available in the choices menu
MENU_OPTIONS=(
    $ALKHEMA_TAM
    $ALKHEMA_GOL
    $ABSOLEM_TAM
    $JOCASTA_TAM
)

# Stores de packages to build
BUILD_FLOW=""

# Color mapping
DEFAULT='\033[0m'
END='\n\033[0m'
WHITE='\033[1;37m'
RED='\033[1;31m'
GREEN='\033[1;36m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'
CYAN='\033[1;96m'
SECONDS=0

# ======================================================================================================================
# Functions declaration
# ======================================================================================================================

# Draw an horizontal line
function horizontalLine() {
    printf ${GREEN}
    printf '%.s─' $(seq 1 $(tput cols))
    printf ${END}
}

# Show the header title
function showHeader() {
    printf "${END}${RED}1${YELLOW}2${GREEN}3 ${WHITE}Builder ✈ "

    if [ "$1" ]; then
        printf ": ${YELLOW}$1"
    fi

    printf "${END}"

    horizontalLine
}

# Execute a shell command. Tabulates te output lines
function execute() {
    local cmd="$1 2>&1 | sed 's/^/\t/'"
    eval $cmd
}

# Shows an message log on screen
function log() {
    echo -e "${YELLOW}- $1${DEFAULT}"
}

# Shows the total time of execution
function showTotalTime() {
    horizontalLine
    DURATION=$SECONDS
    log "Duration: $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds"
}

# Check the output of the last bash command
function checkResult() {
    if [ $? -ne 0 ]; then
        printf "${RED}✖ FAIL${END}\n"

        # Forces exit if param exists
        if [ $1 ]; then
            showTotalTime
            exit 1
        fi
    fi
}

# ======================================================================================================================
# Project Builders
# ======================================================================================================================

# Generates the build hash
function getBuildHash() {
    local path="$PROJECTS_FOLDER$1"
    echo $(tar -cf - $path/dist $path/yarn.lock $path/.git/HEAD 2>/dev/null | md5sum | awk '{print $1}')
}

# Compares the current build hash with the one previously saved
function checkBuildHash() {
    if [ $ForceBuild ]; then
        return 1
    fi

    local path="$PROJECTS_FOLDER$1"

    if [ "$(cat $path/buildhash 2>/dev/null)" = $(getBuildHash $1) ]; then
        log "$1 Build Hash match: No need to rebuild. Moving on..."
        return 0
    else
        return 1
    fi
}

# Saves the current build hash
function saveBuildHash() {
    log "Saving Build Hash"
    local path="$PROJECTS_FOLDER$1"
    $(getBuildHash $1 >$path/buildhash)
}

# Changes the current directory
function changeDirectory() {
    log "Changing to directory ${PROJECTS_FOLDER}$1"
    cd ${PROJECTS_FOLDER}$1
    checkResult 1
}

# Returns the current branch
function getGitBranch() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/' -e 's/^[[:space:]]*//'
}

# Switches to the branch requested by parameter or to main on failure
function changeBranch() {
    log "Fetching new branches"
    execute "git fetch --all"
    checkResult

    local currentBranch=$BranchName

    if [ $(getGitBranch) == "${BranchName}" ]; then
        log "Already on branch ${CYAN}${BranchName}"
    else
        log "Stashing before checkout to ${BranchName}"
        execute "git stash"
        checkResult

        log "Checking-out to ${GREEN}${BranchName}"
        execute "git checkout $BranchName"
        checkResult

        # Checkout in main on failure
        if [ ! $(getGitBranch) == "${BranchName}" ]; then
            currentBranch="main"
            log "Checking-out to ${GREEN}main"
            execute "git checkout main"
            checkResult

            # Check if it is in fact in main. Terminate the script if not
            if [ ! $(getGitBranch) == "main" ]; then
                log "Fail checkout to ${RED}main${WHITE}. Terminating$"
                exit 1
            fi
        fi
    fi

    log "Pulling from ${currentBranch}"
    execute "git pull"
    checkResult

    log "Trying to pull from upstrem/${currentBranch}"
    execute "git pull upstream $currentBranch"
    checkResult 1

    log "Checking-out yarn.lock"
    execute "git checkout yarn.lock"
    checkResult

}

# Deletes the node_modules and dist folder
function deleteResources() {
    log "Deleting old build resources"
    execute "yarn unlink"
    execute "rm -rf node_modules"
    execute "rm -rf dist"
    execute "rm -rf yarn.lock"
}

# Run yarn commands
function installResources() {
    log "Installing new resources"
    execute "yarn install --force"
    execute "yarn upgrade"
    execute "yarn build"
    checkResult 1
    execute "yarn link"
}

# Chemical-x build routine
function buildChemicalX() {
    if checkBuildHash $CHEMICAL_X; then
        return
    fi

    showHeader "Building $CHEMICAL_X"
    changeDirectory $CHEMICAL_X
    changeBranch
    deleteResources
    installResources
    execute "git checkout yarn.lock"

    saveBuildHash $CHEMICAL_X
}

# Alkhema-SDK build routine
function buildAlkhemaSDK() {
    if checkBuildHash $ALKHEMA_SDK; then
        return
    fi

    showHeader "Building $ALKHEMA_SDK"
    changeDirectory $ALKHEMA_SDK
    changeBranch
    execute "yarn unlink @plataforma13/chemical-x-sdkjs"
    deleteResources
    execute "yarn link @plataforma13/chemical-x-sdkjs"
    installResources
    execute "git checkout yarn.lock"

    saveBuildHash $ALKHEMA_SDK
}

# Alkhema-TAM build routine
function buildAlkhemaTam() {
    if checkBuildHash $ALKHEMA_TAM; then
        return
    fi

    showHeader "Building $ALKHEMA_TAM"
    changeDirectory $ALKHEMA_TAM
    changeBranch
    execute "yarn unlink @plataforma13/chemical-x-sdkjs"
    execute "yarn unlink @plataforma13/alkhema-sdk"
    deleteResources
    execute "yarn link @plataforma13/chemical-x-sdkjs"
    execute "yarn link @plataforma13/alkhema-sdk"
    installResources
    execute "git checkout yarn.lock"

    saveBuildHash $ALKHEMA_TAM
}

# Alkhema-GOL build routine
function buildAlkhemaGol() {
    if checkBuildHash $ALKHEMA_GOL; then
        return
    fi

    showHeader "Building $ALKHEMA_GOL"
    changeDirectory $ALKHEMA_GOL
    changeBranch
    execute "yarn unlink @plataforma13/chemical-x-sdkjs"
    execute "yarn unlink @plataforma13/alkhema-sdk"
    deleteResources
    execute "yarn link @plataforma13/chemical-x-sdkjs"
    execute "yarn link @plataforma13/alkhema-sdk"
    installResources
    execute "git checkout yarn.lock"

    saveBuildHash $ALKHEMA_GOL
}

# Absolem-TAM build routine
function buildAbsolemTam() {
    if checkBuildHash $ABSOLEM_TAM; then
        return
    fi

    showHeader "Building $ABSOLEM_TAM"
    changeDirectory $ABSOLEM_TAM
    changeBranch
    execute "yarn unlink @plataforma13/chemical-x-sdkjs"
    execute "yarn unlink @plataforma13/alkhema-sdk"
    execute "yarn unlink @plataforma13/alkhema-tam"
    deleteResources
    execute "yarn link @plataforma13/chemical-x-sdkjs"
    execute "yarn link @plataforma13/alkhema-sdk"
    execute "yarn link @plataforma13/alkhema-tam"
    installResources
    execute "git checkout yarn.lock"

    saveBuildHash $ABSOLEM_TAM
}

# Jocasta-TAM build routine
function buildJocastaTam() {
    if checkBuildHash $JOCASTA_TAM; then
        return
    fi

    showHeader "Building $JOCASTA_TAM"
    changeDirectory $JOCASTA_TAM
    changeBranch
    execute "yarn unlink @plataforma13/chemical-x-sdkjs"
    execute "yarn unlink @plataforma13/alkhema-sdk"
    execute "yarn unlink @plataforma13/alkhema-tam"
    deleteResources
    execute "yarn link @plataforma13/chemical-x-sdkjs"
    execute "yarn link @plataforma13/alkhema-sdk"
    execute "yarn link @plataforma13/alkhema-tam"
    installResources
    execute "git checkout yarn.lock"

    saveBuildHash $JOCASTA_TAM
}

# ======================================================================================================================
# Menu Functions
# ======================================================================================================================

# Show the script help message
function helpFunction() {
    showHeader "Builder for Alkhema-SDK dependent projects"
    echo -e "${END}${WHITE}Keep your upstream pointing to the Platform 13 repositories on your remotes before using this script."
    echo -e "${WHITE}If in doubt, read the development environment preparation documentation on our confluence page."
    echo -e "${WHITE}Before running, make sure that the constant ${YELLOW}PROJECTS_FOLDER${WHITE} value at the beginning of the script is pointing to your project folder."
    echo -e "${END}${YELLOW}Usage:${WHITE} $0 ${YELLOW}-b${WHITE} ${CYAN}\"branch-name\"${WHITE} ${YELLOW}-f -h${END}"
    echo -e " ${YELLOW}-b${WHITE} Branch: Git branch to build. (Will use the main branch if the informed branch does'nt exists)"
    echo -e " ${YELLOW}-f${WHITE} Force: Ignores the hash check and forces the build${END}"
    echo -e " ${YELLOW}-h${WHITE} Help: Show this help screen${END}"
    exit 1
}

# Show the multiselect menu
function multiselect {
    ESC=$(printf "\033")
    cursor_blink_on() { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to() { printf "$ESC[$1;${2:-1}H"; }
    print_inactive() { printf "$2   $1 "; }
    print_active() { printf "$2  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row() {
        IFS=';' read -sdR -p $'\E[6n' ROW COL
        echo ${ROW#*[}
    }

    local return_value=$1
    local -n options=$2

    local selected=()
    for ((i = 0; i < ${#options[@]}; i++)); do
        selected+=("false")
        printf "\n"
    done

    # determine current screen position for overwriting the options
    local lastrow=$(get_cursor_row)
    local startrow=$(($lastrow - ${#options[@]}))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    key_input() {
        local key
        IFS= read -rsn1 key 2>/dev/null >&2
        if [[ $key = "" ]]; then echo enter; fi
        if [[ $key = $'\x20' ]]; then echo space; fi
        if [[ $key = "k" ]]; then echo up; fi
        if [[ $key = "j" ]]; then echo down; fi
        if [[ $key = $'\x1b' ]]; then
            read -rsn2 key
            if [[ $key = [A || $key = k ]]; then echo up; fi
            if [[ $key = [B || $key = j ]]; then echo down; fi
        fi
    }

    toggle_option() {
        local option=$1
        if [[ ${selected[option]} == true ]]; then
            selected[option]=false
        else
            selected[option]=true
        fi
    }

    print_options() {
        # print options by overwriting the last lines
        local idx=0
        for option in "${options[@]}"; do
            local prefix="[ ]"
            if [[ ${selected[idx]} == true ]]; then
                prefix="[\e[38;5;46m✔\e[0m]"
            fi

            cursor_to $(($startrow + $idx))
            if [ $idx -eq $1 ]; then
                print_active "$option" "$prefix"
            else
                print_inactive "$option" "$prefix"
            fi
            ((idx++))
        done
    }

    local active=0
    while true; do
        print_options $active

        # user key control
        case $(key_input) in
        space) toggle_option $active ;;
        enter)
            print_options -1
            break
            ;;
        up)
            ((active--))
            if [ $active -lt 0 ]; then active=$((${#options[@]} - 1)); fi
            ;;
        down)
            ((active++))
            if [ $active -ge ${#options[@]} ]; then active=0; fi
            ;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    eval $return_value='("${selected[@]}")'
}

# ======================================================================================================================
# Parameter parser
# ======================================================================================================================

# Get the script params
while getopts "b:fh" opt; do
    case "$opt" in
    b) BranchName="$OPTARG" ;;
    f) ForceBuild=true ;;
    h) helpFunction ;;
    esac
done

# Show the help message if some required arg is missing
if [ -z "$BranchName" ]; then
    helpFunction
fi

# ======================================================================================================================
# Choices dialog
# ======================================================================================================================

clear
showHeader "Select the projects to Build"
printf "${WHITE}Use the arrow keys to move and spacebar to select${END}"
multiselect result MENU_OPTIONS

# Insert all dependencies on the BUILD_FLOW string
idx=0
for option in "${MENU_OPTIONS[@]}"; do
    if [ ${result[idx]} = true ]; then
        BUILD_FLOW+="${DEPENDENCIES[$option]} "
    fi
    ((idx++))
done

# Cast the dependencies string as array and removes duplicates
BUILD_FLOW=($(echo $BUILD_FLOW | awk -v RS="[ \n]+" '!n[$0]++'))

# ======================================================================================================================
# Build Flow
# ======================================================================================================================

# Call the build functions
for project in "${BUILD_FLOW[@]}"; do
    case "$project" in
    "$CHEMICAL_X") buildChemicalX ;;
    "$ALKHEMA_SDK") buildAlkhemaSDK ;;
    "$ALKHEMA_TAM") buildAlkhemaTam ;;
    "$ALKHEMA_GOL") buildAlkhemaGol ;;
    "$ABSOLEM_TAM") buildAbsolemTam ;;
    "$JOCASTA_TAM") buildJocastaTam ;;
    esac
done

showTotalTime
